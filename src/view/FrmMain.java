/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import db.DB;
import db.DbConnectionData;
import db.DbException;
import db.factory.DbFactory;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import model.dao.ContaDao;
import model.dao.TransacaoDao;
import model.entities.Conta;
import model.entities.Transacao;
import view.listeners.DataChangeListener;

/**
 *
 * @author danilodsf
 */
public class FrmMain extends javax.swing.JFrame implements DataChangeListener {
    
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private DbConnectionData connData = new DbConnectionData();

    public DbConnectionData getConnData() {
        return connData;
    }

    /**
     * Creates new form frmMain
     */
    public FrmMain() {
        initComponents();
        DefaultTableModel modelo = (DefaultTableModel) tblTransacoes.getModel();
        tblTransacoes.setRowSorter(new TableRowSorter(modelo));
        
        try {
            initDatabase();       
            readTblTransacoes();
            loadContas();
        }
        catch (DbException e) {
            JOptionPane.showMessageDialog(null, "Erro ao carregar banco de dados:\n" + e.getMessage());
            System.exit(0);
        }
    }
    
    private void initDatabase() throws DbException {
        String username = "";
        while (username.trim().equals("")) {
            username = JOptionPane.showInputDialog("Para iniciarmos a nossa aplicação, você precisará nos passar alguns dados."
                                                    + "\nPrimeiro precisamos saber qual o USUÁRIO para conexão com o seu servidor LOCAL MySQL:\n\n");
            
            if (username == null) {
                System.exit(0);
            }
        }
        
        String password = JOptionPane.showInputDialog("E agora precisamos que você nos informe a SENHA do usuário \"" + username + "\":\n\n");
        
        if (password == null) {
            System.exit(0);
        }
        
        connData.setUsername(username);
        connData.setPassword(password);
        
        DbFactory.start(connData);
    }
    
    private void readTblTransacoes() {
        DefaultTableModel modelo = (DefaultTableModel) tblTransacoes.getModel();
        modelo.setNumRows(0);
        TransacaoDao dao = new TransacaoDao(DB.getConnection(connData));
        
        try {
            for (Transacao obj : dao.findAll()) {
                modelo.addRow(new Object[] {
                    obj.getId(),
                    translateNaturezaChar(obj.getNatureza()),
                    sdf.format(obj.getData()),
                    obj.getDescricao(),
                    String.format("%.2f", obj.getValor()),
                    obj.getConta().getDescricao()
                });
            }
        }
        catch (DbException e) {
            JOptionPane.showMessageDialog(null, "Erro ao carregar transações:\n" + e.getMessage());
            System.exit(0);
        }
    }
    
    private String translateNaturezaChar(String natureza) {
        if (natureza.equals("E"))
            return "Entrada";
        
        if (natureza.equals("S"))
            return "Saída";
        
        return "";
    }
    
    private void loadContas() {
        ContaDao dao = new ContaDao(DB.getConnection(connData));
        
        try {
            cmbConta.removeAllItems();
            cmbConta.addItem("Selecione a conta");
            
            for (Conta conta : dao.findAll()) {
                cmbConta.addItem(conta);
            }
        }
        catch (DbException e) {
            JOptionPane.showMessageDialog(null, "Erro ao carregar contas:\n" + e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblTransacoes = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        cmbNatureza = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        txtData = new javax.swing.JFormattedTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtDescricao = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        txtValor = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        cmbConta = new javax.swing.JComboBox();
        btnGerenciarContas = new javax.swing.JButton();
        btnCadastrar = new javax.swing.JButton();
        btnLimpar = new javax.swing.JButton();
        btnAtualizar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        btnResumo = new javax.swing.JButton();
        lblTitulo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Planilha Financeira");
        setResizable(false);

        tblTransacoes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NATUREZA", "DATA", "DESCRIÇÃO", "VALOR", "CONTA"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblTransacoes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblTransacoesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblTransacoes);

        jLabel1.setText("Natureza");

        cmbNatureza.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Selecione a natureza", "Entrada", "Saída" }));

        jLabel3.setText("Data");

        try {
            txtData.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel4.setText("Descrição");

        txtDescricao.setColumns(20);
        txtDescricao.setLineWrap(true);
        txtDescricao.setRows(5);
        jScrollPane2.setViewportView(txtDescricao);

        jLabel5.setText("Valor");

        jLabel6.setText("Conta");

        btnGerenciarContas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icons/gear.png"))); // NOI18N
        btnGerenciarContas.setToolTipText("Gerenciar contas");
        btnGerenciarContas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGerenciarContasActionPerformed(evt);
            }
        });

        btnCadastrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icons/add.png"))); // NOI18N
        btnCadastrar.setText("Cadastrar");
        btnCadastrar.setToolTipText("Cadastre uma transação");
        btnCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarActionPerformed(evt);
            }
        });

        btnLimpar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icons/clear.png"))); // NOI18N
        btnLimpar.setText("Limpar");
        btnLimpar.setToolTipText("Limpe o formulário");
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });

        btnAtualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icons/edit.png"))); // NOI18N
        btnAtualizar.setText("Atualizar");
        btnAtualizar.setToolTipText("Atualizar uma transação");
        btnAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarActionPerformed(evt);
            }
        });

        btnExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icons/remove.png"))); // NOI18N
        btnExcluir.setText("Excluir");
        btnExcluir.setToolTipText("Excluir uma transação");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        btnResumo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icons/report.png"))); // NOI18N
        btnResumo.setText("Resumo");
        btnResumo.setToolTipText("Exibir um resumo dos lançamentos");
        btnResumo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResumoActionPerformed(evt);
            }
        });

        lblTitulo.setFont(new java.awt.Font("DejaVu Sans", 1, 18)); // NOI18N
        lblTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitulo.setText("Finanças");
        lblTitulo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblTitulo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblTituloMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbNatureza, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnResumo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtData)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnCadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(btnLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnAtualizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(cmbConta, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnGerenciarContas, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtValor, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(lblTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 668, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbNatureza, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnGerenciarContas)
                            .addComponent(cmbConta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCadastrar)
                            .addComponent(btnLimpar))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAtualizar)
                            .addComponent(btnExcluir))
                        .addGap(18, 18, 18)
                        .addComponent(btnResumo, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 3, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnGerenciarContasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGerenciarContasActionPerformed
        FrmCriarConta frm = new FrmCriarConta(connData);
        frm.subscribeDataChangeListener(this);
        frm.setVisible(true);
    }//GEN-LAST:event_btnGerenciarContasActionPerformed

    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
        clearFields();
    }//GEN-LAST:event_btnLimparActionPerformed

    private void clearFields() {
        cmbNatureza.setSelectedIndex(0);
        txtData.setText("");
        txtDescricao.setText("");
        txtValor.setText("");
        cmbConta.setSelectedIndex(0);
    }
    
    private void btnCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarActionPerformed
        if (validateFields()) {
            TransacaoDao dao = new TransacaoDao(DB.getConnection(connData));
            Transacao obj = new Transacao();

            try {
                obj.setNatureza(getNaturezaChar());
                obj.setDescricao(txtDescricao.getText());
                obj.setData(sdf.parse(txtData.getText()));
                obj.setValor(Double.parseDouble(txtValor.getText().replace(",", ".")));
                obj.setConta((Conta) cmbConta.getSelectedItem());
                
                double saldo = dao.verifyContaSaldo(obj.getConta().getId());
                if (obj.getNatureza().equals("S") && obj.getValor() > saldo) {
                    JOptionPane.showMessageDialog(null, "Operação Inválida!\n\n"
                            + "A saída de $ " 
                            + String.format("%.2f", obj.getValor()) 
                            + " que está tentando cadastrar é superior ao seu saldo de $ " 
                            + String.format("%.2f", saldo) 
                            + " nessa conta!");
                    return;
                }
                
                dao.insert(obj);
                JOptionPane.showMessageDialog(null, "Transação cadastrada com sucesso!");
                readTblTransacoes();
                clearFields();              
            }
            catch (ParseException | DbException e) {
                JOptionPane.showMessageDialog(null, "Erro ao cadastrar transação:\n" + e.getMessage());
            }
        }
        else {
            JOptionPane.showMessageDialog(null, "Verifique se todos os campos estão preenchidos!");
        }
    }//GEN-LAST:event_btnCadastrarActionPerformed

    private void btnAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarActionPerformed
        if (tblTransacoes.getSelectedRow() != -1) {
            if (validateFields()) {
                Transacao obj = new Transacao();
                TransacaoDao dao = new TransacaoDao(DB.getConnection(connData));

                try {
                    obj.setId((int) tblTransacoes.getValueAt(tblTransacoes.getSelectedRow(), 0));
                    obj.setNatureza(getNaturezaChar());
                    obj.setDescricao(txtDescricao.getText());
                    obj.setData(sdf.parse(txtData.getText()));
                    obj.setValor(Double.parseDouble(txtValor.getText().replace(",", ".")));
                    obj.setConta((Conta) cmbConta.getSelectedItem());
                    
                    double saldo = dao.verifyContaSaldo(obj.getConta().getId(), obj.getId());
                    if (obj.getNatureza().equals("S") && obj.getValor() > saldo) {
                        JOptionPane.showMessageDialog(null, "Operação Inválida!\n\n"
                                + "Se você atualizar esse registro para uma saída de $ " 
                                + String.format("%.2f", obj.getValor()) 
                                + " essa conta ficará com saldo negativo!");
                        return;
                    }
                    
                    dao.update(obj);
                    JOptionPane.showMessageDialog(null, "Transação atualizada com sucesso!");
                    readTblTransacoes();
                    clearFields();
                    
                }
                catch (ParseException | DbException e) {
                    JOptionPane.showMessageDialog(null, "Erro ao atualizar transação:\n" + e.getMessage());
                }
            }
            else {
                JOptionPane.showMessageDialog(null, "Verifique se todos os campos estão preenchidos!");
            }
        }
        else {
            JOptionPane.showMessageDialog(null, "Nenhuma transação selecionada!");
        }
    }//GEN-LAST:event_btnAtualizarActionPerformed

    private void tblTransacoesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblTransacoesMouseClicked
        if (tblTransacoes.getSelectedRow() != -1) {
            if (tblTransacoes.getValueAt(tblTransacoes.getSelectedRow(), 1).equals("Entrada"))
                cmbNatureza.setSelectedIndex(1);
            
            else if (tblTransacoes.getValueAt(tblTransacoes.getSelectedRow(), 1).equals("Saída"))
                cmbNatureza.setSelectedIndex(2);
            
            txtData.setText(tblTransacoes.getValueAt(tblTransacoes.getSelectedRow(), 2).toString());
            txtDescricao.setText(tblTransacoes.getValueAt(tblTransacoes.getSelectedRow(), 3).toString());
            txtValor.setText(tblTransacoes.getValueAt(tblTransacoes.getSelectedRow(), 4).toString().replace(".", ","));
            
            for (int i = 0; i < cmbConta.getModel().getSize(); i++) {
                if (cmbConta.getItemAt(i).toString().equals(tblTransacoes.getValueAt(tblTransacoes.getSelectedRow(), 5).toString()))
                    cmbConta.setSelectedIndex(i);
            }
        }
    }//GEN-LAST:event_tblTransacoesMouseClicked

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        if (tblTransacoes.getSelectedRow() != -1) {
            int id = (int) tblTransacoes.getValueAt((tblTransacoes.getSelectedRow()), 0);
            TransacaoDao dao = new TransacaoDao(DB.getConnection(connData));
            
            try {
                dao.deleteById(id);
                JOptionPane.showMessageDialog(null, "Transação excluída com sucesso!");
                readTblTransacoes();
                clearFields();
            }
            catch (DbException e) {
                JOptionPane.showMessageDialog(null, "Erro ao excluir transação:\n" + e.getMessage());
            }
        }
        else {
            JOptionPane.showMessageDialog(null, "Nenhuma transação selecionada!");
        }
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void btnResumoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResumoActionPerformed
        FrmResumo frm = new FrmResumo(connData);
        frm.setVisible(true);
    }//GEN-LAST:event_btnResumoActionPerformed

    private void lblTituloMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblTituloMouseClicked
        FrmSobre frm = new FrmSobre();
        frm.setVisible(true);
    }//GEN-LAST:event_lblTituloMouseClicked
     
    private String getNaturezaChar() {
        if (cmbNatureza.getSelectedIndex() == 1)
            return "E";
        
        if (cmbNatureza.getSelectedIndex() == 2)
            return "S";
        
        return null;
    }
    
    private boolean validateFields() {
        if (cmbNatureza.getSelectedIndex() == 0)
            return false;
        
        if (cmbConta.getSelectedIndex() == 0)
            return false;
        
        if (txtDescricao.getText().trim().equals(""))
            return false;
        
        if (txtData.getText().replace("/", "").trim().equals(""))
            return false;
        
        if (txtValor.getText().trim().equals(""))
            return false;
        
        return true;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtualizar;
    private javax.swing.JButton btnCadastrar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnGerenciarContas;
    private javax.swing.JButton btnLimpar;
    private javax.swing.JButton btnResumo;
    private javax.swing.JComboBox cmbConta;
    private javax.swing.JComboBox cmbNatureza;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JTable tblTransacoes;
    private javax.swing.JFormattedTextField txtData;
    private javax.swing.JTextArea txtDescricao;
    private javax.swing.JTextField txtValor;
    // End of variables declaration//GEN-END:variables

    @Override
    public void onDataChanged() {
        readTblTransacoes();
        loadContas();
    }
}
